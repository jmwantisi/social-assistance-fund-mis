@page "/applicants"
@using SocialAssistanceFundMisMcv.ViewModels
@using socialAssistanceFundMIS.Services.Applicants
@inject NavigationManager Navigation
@inject IApplicantService ApplicantService

<h2 class="mb-4">👥 Applicants</h2>

<div class="d-flex justify-content-between align-items-center mb-4">
    <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/applicants/create"))">
        <i class="fa fa-plus me-2"></i> Create New
    </button>
</div>

@if (applicants is null)
{
    <div class="alert alert-info">
        <i class="fa fa-spinner fa-spin me-2"></i> Loading applicants...
    </div>
}
else if (!applicants.Any())
{
    <div class="alert alert-info shadow-sm mt-4">
        <i class="fa fa-info-circle me-2"></i> No applicants found.
    </div>
}
else
{
    <div class="table-responsive shadow-sm">
        <table class="table table-hover align-middle" id="applicantsTable">
            <thead class="table-light">
                <tr>
                    <th>Full Name</th>
                    <th>DOB</th>
                    <th>Gender</th>
                    <th>Marital</th>
                    <th>ID Number</th>
                    <th>Location</th>
                    <th>Postal Address</th>
                    <th>Physical Address</th>
                    <th>Contact(s)</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var applicant in applicants)
                {
                    <tr>
                        <td><i class="fa fa-user text-secondary me-1"></i>@applicant.FullName</td>
                        <td>@applicant.FormattedDob</td>
                        <td>@applicant.SexName</td>
                        <td>@applicant.MaritalStatusName</td>
                        <td><span class="badge bg-primary">@applicant.IdentityCardNumber</span></td>
                        <td>@applicant.Location</td>
                        <td>@applicant.PostalAddress</td>
                        <td>@applicant.PhysicalAddress</td>
                        <td>@applicant.PhoneNumbersListString</td>
                        <td class="text-center">
                            <div class="d-flex justify-content-center gap-1">
                                <button class="btn btn-outline-warning btn-sm" @onclick="() => EditApplicant(applicant.Id)" title="Edit">
                                    <i class="fa-solid fa-pen"></i>
                                </button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => ConfirmDelete(applicant.Id)" title="Delete">
                                    <i class="fa-solid fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<ApplicantViewModel>? applicants;

    protected override async Task OnInitializedAsync()
    {
        // Directly fetch ApplicantViewModel from service
        applicants = await ApplicantService.GetAllApplicantsAsync();
    }

    private void EditApplicant(int id)
    {
        Navigation.NavigateTo($"/applicants/edit/{id}");
    }

    private async Task ConfirmDelete(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this applicant?");
        if (confirmed)
        {
            await ApplicantService.DeleteApplicantAsync(id);
            applicants = await ApplicantService.GetAllApplicantsAsync(); // Refresh list
        }
    }

    [Inject] IJSRuntime JSRuntime { get; set; } = default!;
}

