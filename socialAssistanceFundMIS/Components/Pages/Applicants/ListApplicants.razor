@page "/applicants"
@using socialAssistanceFundMIS.Services.Applicants
@using socialAssistanceFundMIS.ViewModels
@inject IApplicantService ApplicantService
@inject NavigationManager Navigation

<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="page-title">Applicants</h1>
            <p class="page-subtitle">Manage and view all applicants in the system</p>
        </div>
        <div class="d-flex gap-3">
            <button class="btn btn-outline-secondary" @onclick="ExportApplicants">
                <i class="bi bi-download me-2"></i>Export
            </button>
            <a href="/applicants/create" class="btn btn-primary">
                <i class="bi bi-plus-circle me-2"></i>Add Applicant
            </a>
        </div>
    </div>
</div>

<!-- Search and Filters -->
<div class="card mb-4">
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <label class="form-label">Search</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control" placeholder="Search by name, email, or ID..." 
                               @bind="SearchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label class="form-label">Status</label>
                    <select class="form-select" @bind="SelectedStatus">
                        <option value="">All Statuses</option>
                        <option value="Active">Active</option>
                        <option value="Inactive">Inactive</option>
                    </select>
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label class="form-label">Sex</label>
                    <select class="form-select" @bind="SelectedSex">
                        <option value="">All</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                    </select>
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label class="form-label">Age Range</label>
                    <select class="form-select" @bind="SelectedAgeRange">
                        <option value="">All Ages</option>
                        <option value="18-25">18-25</option>
                        <option value="26-35">26-35</option>
                        <option value="36-50">36-50</option>
                        <option value="50+">50+</option>
                    </select>
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label class="form-label">&nbsp;</label>
                    <button class="btn btn-outline-primary w-100" @onclick="ApplyFilters">
                        <i class="bi bi-funnel me-2"></i>Apply
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Results Summary -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div class="results-summary">
        <span class="text-muted">Showing @((CurrentPage - 1) * PageSize + 1) to @Math.Min(CurrentPage * PageSize, TotalCount) of @TotalCount results</span>
    </div>
    <div class="d-flex gap-2">
        <select class="form-select form-select-sm" style="width: auto;" @bind="PageSize">
            <option value="10">10 per page</option>
            <option value="20">20 per page</option>
            <option value="50">50 per page</option>
            <option value="100">100 per page</option>
        </select>
    </div>
</div>

<!-- Applicants Table -->
<div class="card">
    <div class="card-body p-0">
        @if (IsLoading)
        {
            <div class="text-center py-5">
                <div class="spinner mb-3"></div>
                <p class="text-muted">Loading applicants...</p>
            </div>
        }
        else if (Applicants?.Any() == true)
        {
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" class="form-check-input" @bind="SelectAll" @onchange="ToggleSelectAll" />
                            </th>
                            <th>
                                <button class="btn btn-link text-decoration-none p-0" @onclick="() => SortBy("Name")">
                                    Name
                                    @if (SortColumn == "Name")
                                    {
                                        <i class="bi @(SortAscending ? "bi-arrow-up" : "bi-arrow-down")"></i>
                                    }
                                </button>
                            </th>
                            <th>Age</th>
                            <th>Sex</th>
                            <th>Contact</th>
                            <th>Location</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var applicant in Applicants)
                        {
                            <tr class="@(SelectedApplicants.Contains(applicant.Id) ? "table-primary" : "")">
                                <td>
                                    <input type="checkbox" class="form-check-input" 
                                           checked="@SelectedApplicants.Contains(applicant.Id)"
                                           @onchange="(e) => ToggleApplicantSelection(applicant.Id, e.Value)" />
                                </td>
                                <td>
                                    <div class="d-flex align-items-center gap-3">
                                        <div class="applicant-avatar">
                                            <i class="bi bi-person-circle"></i>
                                        </div>
                                        <div>
                                            <div class="fw-bold">@applicant.FullName</div>
                                            <small class="text-muted">ID: @applicant.IdentityCardNumber</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge badge-outline">@applicant.Age years</span>
                                </td>
                                <td>@applicant.SexName</td>
                                <td>
                                    <div>
                                        @if (!string.IsNullOrEmpty(applicant.Email))
                                        {
                                            <div><i class="bi bi-envelope me-1"></i>@applicant.Email</div>
                                        }
                                        @if (applicant.PhoneNumbers?.Any() == true)
                                        {
                                            <div><i class="bi bi-telephone me-1"></i>@applicant.PhoneNumbers.First().PhoneNumber</div>
                                        }
                                    </div>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(applicant.VillageName))
                                    {
                                        <span class="text-muted">@applicant.VillageName</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not specified</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge badge-success">Active</span>
                                </td>
                                <td>
                                    <small class="text-muted">@applicant.CreatedAt.ToString("MMM dd, yyyy")</small>
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-primary" @onclick="() => ViewApplicant(applicant.Id)" title="View">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button class="btn btn-outline-secondary" @onclick="() => EditApplicant(applicant.Id)" title="Edit">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-outline-danger" @onclick="() => DeleteApplicant(applicant.Id)" title="Delete">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="bi bi-people text-muted" style="font-size: 3rem;"></i>
                <h5 class="text-muted mt-3">No applicants found</h5>
                <p class="text-muted">Try adjusting your search criteria or add a new applicant.</p>
                <a href="/applicants/create" class="btn btn-primary">
                    <i class="bi bi-plus-circle me-2"></i>Add First Applicant
                </a>
            </div>
        }
    </div>
</div>

<!-- Bulk Actions -->
@if (SelectedApplicants.Any())
{
    <div class="card mt-4">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center">
                <span class="text-muted">@SelectedApplicants.Count applicant(s) selected</span>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary" @onclick="ExportSelected">
                        <i class="bi bi-download me-2"></i>Export Selected
                    </button>
                    <button class="btn btn-outline-warning" @onclick="BulkUpdateStatus">
                        <i class="bi bi-pencil-square me-2"></i>Update Status
                    </button>
                    <button class="btn btn-outline-danger" @onclick="BulkDelete">
                        <i class="bi bi-trash me-2"></i>Delete Selected
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Pagination -->
@if (TotalPages > 1)
{
    <nav aria-label="Applicants pagination" class="mt-4">
        <ul class="pagination justify-content-center">
            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">
                    <i class="bi bi-chevron-left"></i>
                </button>
            </li>
            
            @for (int i = Math.Max(1, CurrentPage - 2); i <= Math.Min(TotalPages, CurrentPage + 2); i++)
            {
                <li class="page-item @(i == CurrentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                </li>
            }
            
            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">
                    <i class="bi bi-chevron-right"></i>
                </button>
            </li>
        </ul>
    </nav>
}

@code {
    private List<ApplicantViewModel> Applicants { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private string SearchTerm { get; set; } = string.Empty;
    private string SelectedStatus { get; set; } = string.Empty;
    private string SelectedSex { get; set; } = string.Empty;
    private string SelectedAgeRange { get; set; } = string.Empty;
    
    // Pagination
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 20;
    private int TotalCount { get; set; } = 0;
    private int TotalPages => (int)Math.Ceiling((double)TotalCount / PageSize);
    
    // Sorting
    private string SortColumn { get; set; } = "Name";
    private bool SortAscending { get; set; } = true;
    
    // Selection
    private List<int> SelectedApplicants { get; set; } = new();
    private bool SelectAll { get; set; } = false;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadApplicants();
    }
    
    private async Task LoadApplicants()
    {
        try
        {
            IsLoading = true;
            // In a real implementation, you would call the service with proper parameters
            // var result = await ApplicantService.GetApplicantsAsync(SearchTerm, CurrentPage, PageSize, SortColumn, SortAscending);
            
            // For now, using sample data
            await Task.Delay(1000); // Simulate API call
            
            Applicants = GenerateSampleApplicants();
            TotalCount = 1247; // Sample total count
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading applicants: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    private async Task HandleSearch()
    {
        CurrentPage = 1;
        await LoadApplicants();
    }
    
    private async Task ApplyFilters()
    {
        CurrentPage = 1;
        await LoadApplicants();
    }
    
    private async Task ChangePage(int page)
    {
        CurrentPage = page;
        await LoadApplicants();
    }
    
    private async Task SortBy(string column)
    {
        if (SortColumn == column)
        {
            SortAscending = !SortAscending;
        }
        else
        {
            SortColumn = column;
            SortAscending = true;
        }
        
        await LoadApplicants();
    }
    
    private void ToggleSelectAll()
    {
        if (SelectAll)
        {
            SelectedApplicants = Applicants.Select(a => a.Id).ToList();
        }
        else
        {
            SelectedApplicants.Clear();
        }
    }
    
    private void ToggleApplicantSelection(int applicantId, object? isChecked)
    {
        if (isChecked is bool checkedValue)
        {
            if (checkedValue)
            {
                if (!SelectedApplicants.Contains(applicantId))
                    SelectedApplicants.Add(applicantId);
            }
            else
            {
                SelectedApplicants.Remove(applicantId);
            }
        }
        
        SelectAll = SelectedApplicants.Count == Applicants.Count;
    }
    
    private void ViewApplicant(int id)
    {
        Navigation.NavigateTo($"/applicants/{id}");
    }
    
    private void EditApplicant(int id)
    {
        Navigation.NavigateTo($"/applicants/{id}/edit");
    }
    
    private async Task DeleteApplicant(int id)
    {
        // Implement delete confirmation and logic
        await Task.CompletedTask;
    }
    
    private async Task ExportApplicants()
    {
        // Implement export logic
        await Task.CompletedTask;
    }
    
    private async Task ExportSelected()
    {
        // Implement export selected logic
        await Task.CompletedTask;
    }
    
    private async Task BulkUpdateStatus()
    {
        // Implement bulk update logic
        await Task.CompletedTask;
    }
    
    private async Task BulkDelete()
    {
        // Implement bulk delete logic
        await Task.CompletedTask;
    }
    
    private List<ApplicantViewModel> GenerateSampleApplicants()
    {
        return new List<ApplicantViewModel>
        {
            new() { Id = 1, FirstName = "John", LastName = "Doe", FullName = "John Doe", Age = 35, SexName = "Male", Email = "john.doe@email.com", IdentityCardNumber = "ID123456", VillageName = "Central Village", CreatedAt = DateTime.Now.AddDays(-10) },
            new() { Id = 2, FirstName = "Jane", LastName = "Smith", FullName = "Jane Smith", Age = 28, SexName = "Female", Email = "jane.smith@email.com", IdentityCardNumber = "ID123457", VillageName = "North District", CreatedAt = DateTime.Now.AddDays(-15) },
            new() { Id = 3, FirstName = "Robert", LastName = "Johnson", FullName = "Robert Johnson", Age = 42, SexName = "Male", Email = "robert.johnson@email.com", IdentityCardNumber = "ID123458", VillageName = "South Quarter", CreatedAt = DateTime.Now.AddDays(-20) },
            new() { Id = 4, FirstName = "Mary", LastName = "Williams", FullName = "Mary Williams", Age = 31, SexName = "Female", Email = "mary.williams@email.com", IdentityCardNumber = "ID123459", VillageName = "East End", CreatedAt = DateTime.Now.AddDays(-25) },
            new() { Id = 5, FirstName = "Michael", LastName = "Brown", FullName = "Michael Brown", Age = 39, SexName = "Male", Email = "michael.brown@email.com", IdentityCardNumber = "ID123460", VillageName = "West Side", CreatedAt = DateTime.Now.AddDays(-30) }
        };
    }
}

